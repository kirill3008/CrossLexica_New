def _process_files_impl(ctx):
    # Get the executable from the binary target
    binary = ctx.executable.binary
    # Create the output directories
    output_files = ctx.outputs.outs
    output_dir = output_files[0].dirname if output_files else None
    # Create a script that will run the binary with the correct working directory
    script = ctx.actions.declare_file("%s_runner.sh" % ctx.label.name)
    script_content = """
#!/bin/bash
set -e

# Symlink input files to working directory
{symlink_commands}

# Run the binary
{binary_path}

# Copy output files to their destinations
{output_copy_commands}
"""
    # Generate commands to copy input files to the working directory
    symlink_commands = ["ln -sf '%s' '%s'" %
                       (src.path, src.basename)
                       for src in ctx.files.srcs]
    # Check if any .DAS files exist in the inputs
    has_das_files = any([src.basename.upper().endswith(".DAS") for src in ctx.files.srcs])

    # Generate commands to copy output files from the working directory
    output_copy_commands = ["mkdir -p '%s'" % output_dir] if output_dir else []
    output_copy_commands.extend(
        ["cp '%s' '%s'" %
         (ctx.outputs.outs[i].basename, output_files[i].path)
         for i in range(len(output_files))]
    )
    # Fill in the script template
    script_content = script_content.format(
        symlink_commands = "\n".join(symlink_commands),
        binary_path = binary.path,
        output_copy_commands = "\n".join(output_copy_commands),
    )
    # Write the script
    ctx.actions.write(
        output = script,
        content = script_content,
        is_executable = True,
    )
    # Run the script
    ctx.actions.run(
        outputs = output_files,
        inputs = ctx.files.srcs,
        executable = script,
        tools = [binary],
        env = {"XL_DAS_PATH": "./"}  if has_das_files else {},
        progress_message = "Processing files with %s" % binary.path,
    )
    return [DefaultInfo(files = depset(output_files))]

_process_files = rule(
    implementation = _process_files_impl,
    attrs = {
        "srcs": attr.label_list(
            allow_files = True,
            doc = "Input files that need to be present in the binary's working directory",
        ),
        "binary": attr.label(
            executable = True,
            cfg = "exec",
            doc = "The binary that will process the files",
            mandatory = True,
        ),
        "outs": attr.output_list(
            doc = "Output files that will be generated by the binary",
            mandatory = True,
        ),
    },
)

def process_files(binary, srcs = None, outs = None, **kwargs):
    # Get the name part of the binary label
    if ":" in binary:
        binary_name = binary.split(":")[-1]
    else:
        parts = binary.split("/")
        binary_name = parts[-1] if parts else binary
    _process_files(
        name = binary_name + "_gen",
        binary = binary,
        srcs = srcs,
        outs = outs,
        **kwargs
    )
